* General settings
** Make emacs less annoying
#+BEGIN_SRC emacs-lisp
  ;;; Visible-bell also deactivites the normal bell which is annoying
  (setq ring-bell-function 'ignore)
#+END_SRC
** Configure the autosace behavior
#+BEGIN_SRC emacs-lisp
;;; Store backup files in tmp directory
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

;; Make sure emacs does not create new splits all the time
(setq inhibit-startup-screen t)
;(setq split-height-threshold 1200)
;(setq split-width-threshold 2000)

;;; retore split screens
(winner-mode 1)
#+END_SRC
   
** Look and feel
#+BEGIN_SRC emacs-lisp
  ;; set the default font
  (if (eq system-type 'darwin)
      (add-to-list 'default-frame-alist '(font . "Droid Sans Mono-18"))
    (add-to-list 'default-frame-alist '(font . "Droid Sans Mono-12")))

  (tool-bar-mode -1)
  (require 'doom-themes)
  (load-theme 'doom-one t)
  (require 'all-the-icons)
  (require 'spaceline-config)
  (use-package spaceline-all-the-icons :after spaceline)
  (use-package spaceline :after powerline :config (setq-default mode-line-format '("%e" (:eval (spaceline-ml-ati)))))

  (require 'font-lock)
  (defun --copy-face (new-face face)
    "Define NEW-FACE from existing FACE."
    (copy-face face new-face)
    (eval `(defvar ,new-face nil))
    (set new-face new-face))

  (--copy-face 'font-lock-label-face  ; labels, case, public, private, proteced, namespace-tags
           'font-lock-keyword-face)
  (--copy-face 'font-lock-doc-markup-face ; comment markups such as Javadoc-tags
           'font-lock-doc-face)
  (--copy-face 'font-lock-doc-string-face ; comment markups
           'font-lock-comment-face)

  (global-font-lock-mode t)
  (setq font-lock-maximum-decoration t)

  (require 'relative-line-numbers)
  (global-relative-line-numbers-mode)

  (if (eq system-type 'darwin)
      (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       '(default
          ((t
            (:inherit nil
                      :stipple nil
                      :background "#3f3f3f"
                      :foreground "#dadaca"
                      :inverse-video nil
                      :box nil
                      :strike-through nil
                      :overline nil
                      :underline nil
                      :slant normal
                      :weight normal
                      :height 150
                      :width normal
                      :foundry "nil"
                      :family "Meslo LG L for Powerline")))))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(default ((t (:family "Meslo LG L for Powerline" :foundry "bitstream" :slant normal :weight normal :height 100 :width normal))))))
  ; '(linum ((t (:background "#3f3f3f" :foreground "#636363" :height 1.0)))))

#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+END_SRC
* General Packages
  Here are configurations for language independent packages
** Evil
#+BEGIN_SRC emacs-lisp
(defvar evil-enabled nil)

(require 'evil-leader)
(require 'evil)
(require 'evil-surround)

(global-evil-leader-mode)
(global-evil-surround-mode 1)
(evil-mode 1)
#+END_SRC
*** Key bindings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-leader ",")
(evil-leader/set-key
  "m" 'magit-status
  "b" 'helm-buffers-list
  "d" 'kill-buffer
  "p" 'point-to-register
  "j" 'jump-to-register)


(define-key evil-normal-state-map "L" "$")
(define-key evil-normal-state-map "H" "^")
(define-key evil-normal-state-map (kbd "C-p") 'fiplr-find-file)
(define-key evil-normal-state-map "\\" 'next-buffer)
(define-key evil-normal-state-map "|" 'previous-buffer)
(define-key evil-normal-state-map "gt" 'next-frame)

(define-key evil-visual-state-map "H" "^")
(define-key evil-visual-state-map "L" "$")
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
  (global-flycheck-mode)
  (setq flycheck-global-modes '(not LaTeX-mode latex-mode))
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (setq company-global-modes '(not gud-mode))
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common) ;
  (setq company-tooltip-align-annotations t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (require 'evil-magit)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-global-mode)
#+END_SRC
** Ido
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching 1)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC
** fiplr
#+BEGIN_SRC emacs-lisp
(require 'fiplr)
(setq fiplr-root-markers '("Makefile" "README"))
(global-set-key (kbd "C-p") 'fiplr-find-file)
#+END_SRC
** NeoTree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(add-hook 'neotree-mode-hook
	  (lambda ()
	    (define-key evil-normal-state-map (kbd "TAB") 'neotree-enter)
	    (define-key evil-normal-state-map (kbd "SPC") 'neotree-enter)
	    (define-key evil-normal-state-map (kbd "RET") 'neotree-enter)
	    (define-key evil-normal-state-map (kbd "q") 'neotree-hide)))
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-rtags-menu (:color pink
				    :hint nil)
    "
^Action^
^^^^^^^^
_rs_: find references for symbol
_rp_: find references at point
_d_: run diagnostics
_gs_: goto symbol...
_gf_: goto file...
_m_: rtags-menu
_i_: print symbol info
_p_: preprocess file
_t_: print type under cursor
"
    ("rp" rtags-find-references-at-point :exit t)
    ("rs" rtags-find-references :exit t)
    ("gs" rtags-find-symbol :exit t)
    ("d" rtags-diagnostics :exit t)
    ("gf" rtags-find-file :exit t)
    ("m" rtags-imenu :exit t)
    ("i" rtags-print-symbol-info :exit t)
    ("p" rtags-preprocess-file :exit t)
    ("t" rtags-symbol-type :exit t)
    ("c" nil "cancel")
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)
    ("q" quit-window "quit" :color blue))

(defhydra hydra-space-menu (:color pink
				    :hint nil)
    "
^Action^
^^^^^^^^
_m_: maximize
_r_: rtags...
_d_: Don't show dos-endings for dos-unix mixed files
_lc_: reload config
_ec_: edit .emacs file
_gi_: guess current indentation
_fb_: format current buffer
_fr_: format region
"
	("m" toggle-frame-maximized :exit t)
    ("r" (hydra-rtags-menu/body) :exit t)
    ("lc" (load-file "~/.emacs") :exit t)
    ("ec" (find-file "~/.home/.emacs") :exit t)
    ("gi" (c-guess) :exit t)
    ("d" (remove-dos-eol) :exit t)
	("fb" clang-format-buffer :exit t)
	("fr" clang-format-region :exit t)
    ("c" nil "cancel")
    ("q" quit-window "quit" :color blue))

(define-key evil-normal-state-map (kbd "SPC") 'hydra-space-menu/body)
#+END_SRC
* Languages
** General
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
;;; Electric Pair
(electric-pair-mode 1)
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
  (require 'company-auctex)
  (company-auctex-init)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)

  ;;; line break after 80 chars
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (setq fill-column 80)

  ;; Use Skim as viewer, enable source <-> PDF sync
  ;; make latexmk available via C-c C-c
  ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
  (add-hook 'LaTeX-mode-hook (lambda ()
    (push
      '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
        :help "Run latexmk on file")
      TeX-command-list)))
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

  ;; use Skim as default pdf viewer
  ;; Skim's displayline is used for forward search (from .tex to .pdf)
  ;; option -b highlights the current line; option -g opens Skim in the background  
  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
       '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  ;;; Enable paredit whenever a lisp-file is opened
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq-default flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))


;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

;; format options
(setq-default tide-format-options
              '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi)
  (flycheck-define-checker python-flake8 "Use the flake8 checker"))
(add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
(setq-default inferior-lisp-program "/usr/local/bin/sbcl")

;;; Autocompletion for lisp
(setq tab-always-indent 'complete)
;;; Syntax highlighting
(setq font-lock-maximum-decoration t)
;;; more fancy syntax highlighting
;(add-hook 'after-init-hook 'global-color-identifiers-mode)
;(add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+END_SRC
** C++
*** General settings
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(setq-default
 c-basic-offset 4
 tab-width 4
 indent-tabs-mode nil)
(setq c-default-style "linux")
(c-set-offset 'innamespace 0)
#+END_SRC
*** Better C++11 support
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook
      '(lambda()
        (font-lock-add-keywords
         nil '(;; complete some fundamental keywords
           ("\\<\\(void\\|unsigned\\|signed\\|char\\|short\\|bool\\|int\\|long\\|float\\|double\\)\\>" . font-lock-keyword-face)
           ;; add the new C++11 keywords
           ("\\<\\(alignof\\|alignas\\|constexpr\\|decltype\\|noexcept\\|nullptr\\|static_assert\\|thread_local\\|override\\|final\\)\\>" . font-lock-keyword-face)
           ("\\<\\(char[0-9]+_t\\)\\>" . font-lock-keyword-face)
           ;; PREPROCESSOR_CONSTANT
           ("\\<[A-Z]+[A-Z_]+\\>" . font-lock-constant-face)
           ;; hexadecimal numbers
           ("\\<0[xX][0-9A-Fa-f]+\\>" . font-lock-constant-face)
           ;; integer/float/scientific numbers
           ("\\<[\\-+]*[0-9]*\\.?[0-9]+\\([ulUL]+\\|[eE][\\-+]?[0-9]+\\)?\\>" . font-lock-constant-face)
           ;; user-types (customize!)
           ("\\<[A-Za-z_]+[A-Za-z_0-9]*_\\(t\\|type\\|ptr\\)\\>" . font-lock-type-face)
           ("\\<\\(xstring\\|xchar\\)\\>" . font-lock-type-face)
           ))
        ) t)
#+END_SRC
*** rtags
#+BEGIN_SRC emacs-lisp
(require 'company-rtags)
(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(push 'company-rtags company-backends)
(global-company-mode)
(require 'flycheck-rtags)

(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil))

(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

#+END_SRC
*** Key bindings
#+BEGIN_SRC emacs-lisp
(evil-define-key 'visual c++-mode-map "=" 'clang-format-buffer)
(evil-leader/set-key-for-mode 'c++-mode
  "g" 'rtags-find-symbol-at-point
  "s" 'rtags-find-symbol
  "h" 'rtags-location-stack-back
  "l" 'rtags-location-stack-forward
  "f" 'rtags-fixit
  "=" 'clang-format-buffer)

(evil-leader/set-key-for-mode 'c-mode
  "g" 'rtags-find-symbol-at-point
  "s" 'rtags-find-symbol
  "h" 'rtags-location-stack-back
  "l" 'rtags-location-stack-forward
  "=" 'clang-format-buffer)

#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(setq racer-cmd "/Users/mpilman/.cargo/bin/racer")
(setq racer-rust-src-path "/Users/mpilman/Projects/rustc-1.9.0/src")
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)

(add-hook 'racer-mode-hook #'company-mode)
#+END_SRC
